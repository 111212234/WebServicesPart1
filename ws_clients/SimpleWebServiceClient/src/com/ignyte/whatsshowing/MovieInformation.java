package com.ignyte.whatsshowing;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.3
 * 2015-11-03T22:42:44.237+02:00
 * Generated source version: 3.1.3
 * 
 */
@WebServiceClient(name = "MovieInformation", 
                  wsdlLocation = "http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx?wsdl",
                  targetNamespace = "http://www.ignyte.com/whatsshowing") 
public class MovieInformation extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.ignyte.com/whatsshowing", "MovieInformation");
    public final static QName MovieInformationSoap12 = new QName("http://www.ignyte.com/whatsshowing", "MovieInformationSoap12");
    public final static QName MovieInformationSoap = new QName("http://www.ignyte.com/whatsshowing", "MovieInformationSoap");
    static {
        URL url = null;
        try {
            url = new URL("http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(MovieInformation.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://www.ignyte.com/webservices/ignyte.whatsshowing.webservice/moviefunctions.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public MovieInformation(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MovieInformation(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MovieInformation() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public MovieInformation(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public MovieInformation(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public MovieInformation(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns MovieInformationSoap
     */
    @WebEndpoint(name = "MovieInformationSoap12")
    public MovieInformationSoap getMovieInformationSoap12() {
        return super.getPort(MovieInformationSoap12, MovieInformationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MovieInformationSoap
     */
    @WebEndpoint(name = "MovieInformationSoap12")
    public MovieInformationSoap getMovieInformationSoap12(WebServiceFeature... features) {
        return super.getPort(MovieInformationSoap12, MovieInformationSoap.class, features);
    }


    /**
     *
     * @return
     *     returns MovieInformationSoap
     */
    @WebEndpoint(name = "MovieInformationSoap")
    public MovieInformationSoap getMovieInformationSoap() {
        return super.getPort(MovieInformationSoap, MovieInformationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MovieInformationSoap
     */
    @WebEndpoint(name = "MovieInformationSoap")
    public MovieInformationSoap getMovieInformationSoap(WebServiceFeature... features) {
        return super.getPort(MovieInformationSoap, MovieInformationSoap.class, features);
    }

}
